==1161== Memcheck, a memory error detector
==1161== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1161== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1161== Command: ./outDebug
==1161== 
==1161== Invalid write of size 8
==1161==    at 0x109862: Solution::addTwoNumbers(ListNode*, ListNode*) (Solution1.cpp:58)
==1161==    by 0x1094BE: main (Solution1.cpp:109)
==1161==  Address 0x4dd5dc8 is 8 bytes before an unallocated block of size 4,121,104 in arena "client"
==1161== 
==1161== Invalid write of size 4
==1161==    at 0x10991C: Solution::addTwoNumbers(ListNode*, ListNode*) (Solution1.cpp:68)
==1161==    by 0x1094BE: main (Solution1.cpp:109)
==1161==  Address 0x4dd5dc0 is 16 bytes before an unallocated block of size 4,121,104 in arena "client"
==1161== 
==1161== Invalid write of size 8
==1161==    at 0x10989B: Solution::addTwoNumbers(ListNode*, ListNode*) (Solution1.cpp:63)
==1161==    by 0x1094BE: main (Solution1.cpp:109)
==1161==  Address 0x4dd5db8 is 24 bytes before an unallocated block of size 4,121,104 in arena "client"
==1161== 
--1161-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) - exiting
--1161-- si_code=1;  Faulting address: 0x8;  sp: 0x1002ca9df0

valgrind: the 'impossible' happened:
   Killed by fatal signal

host stacktrace:
==1161==    at 0x5804ABEC: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==1161==    by 0x5804CF0A: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==1161==    by 0x5800500C: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==1161==    by 0x580051F1: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==1161==    by 0x5809B7DC: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==1161==    by 0x580E3F40: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 1161)
==1161==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1161==    by 0x4BF4BA3: _IO_file_doallocate (filedoalloc.c:101)
==1161==    by 0x4C03CDF: _IO_doallocbuf (genops.c:347)
==1161==    by 0x4C02F5F: _IO_file_overflow@@GLIBC_2.2.5 (fileops.c:744)
==1161==    by 0x4C016D4: _IO_new_file_xsputn (fileops.c:1243)
==1161==    by 0x4C016D4: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1196)
==1161==    by 0x4BF5FD6: fwrite (iofwrite.c:39)
==1161==    by 0x499FB64: std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==1161==    by 0x499FEBA: std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==1161==    by 0x1094DB: main (Solution1.cpp:111)
client stack range: [0x1FFEFFE000 0x1FFF000FFF] client SP: 0x1FFEFFFAF0
valgrind stack range: [0x1002BAA000 0x1002CA9FFF] top usage: 18984 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

